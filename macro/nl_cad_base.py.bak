"""Natural Language CAD Editor base class"""

import re
import math
import FreeCAD
import FreeCADGui
import Part

class NaturalLanguageCADEditor:
    """Natural Language CAD Editor"""
    
    def __init__(self):
        """Initialize the NL CAD editor"""
        self.standard_parts = None
        self.manufacturing = None
        self.optimization = None
        self.command_handlers = {}
        
    def initialize_modules(self):
        """Initialize all modules"""
        try:
            # Import modules
            from standard_parts import StandardParts
            from manufacturing_features import ManufacturingFeatures
            from optimization_features import OptimizationFeatures
            
            # Initialize modules
            self.standard_parts = StandardParts()
            print("Debug: StandardParts initialized in NaturalLanguageCADEditor")
            
            self.manufacturing = ManufacturingFeatures()
            print("Debug: ManufacturingFeatures initialized in NaturalLanguageCADEditor")
            
            self.optimization = OptimizationFeatures()
            print("Debug: OptimizationFeatures initialized in NaturalLanguageCADEditor")
            
            # Register command handlers
            self.register_command_handler('gear', self.handle_gear)
            self.register_command_handler('bearing', self.handle_bearing)
            self.register_command_handler('shaft', self.handle_shaft)
            self.register_command_handler('draft', self.handle_draft)
            self.register_command_handler('taper', self.handle_draft)
            self.register_command_handler('rib', self.handle_ribs)
            self.register_command_handler('ribs', self.handle_ribs)
            self.register_command_handler('reinforce', self.handle_ribs)
            self.register_command_handler('shell', self.handle_shell)
            self.register_command_handler('hollow', self.handle_shell)
            self.register_command_handler('extrude', self.handle_extrude)
            self.register_command_handler('moldable', self.handle_moldable)
            self.register_command_handler('injection', self.handle_moldable)
            self.register_command_handler('printable', self.handle_printable)
            self.register_command_handler('3d print', self.handle_printable)
            self.register_command_handler('lighter', self.handle_weight)
            self.register_command_handler('reduce weight', self.handle_weight)
            self.register_command_handler('hole', self.handle_hole)
            self.register_command_handler('drill', self.handle_hole)
            self.register_command_handler('fillet', self.handle_fillet)
            self.register_command_handler('round', self.handle_fillet)
            self.register_command_handler('create', self.handle_create)
            self.register_command_handler('make', self.handle_create)
            
            print(f"Debug: Registered {len(self.command_handlers)} command keywords: {list(self.command_handlers.keys())}")
            print("Debug: NL CAD modules initialized - Standard Parts, Manufacturing Features, and Optimization Features loaded")
            return True
        except Exception as e:
            print(f"Error initializing NL CAD modules: {str(e)}")
            return False
    
    def register_command_handler(self, keyword, handler):
        """Register a command handler for a keyword"""
        self.command_handlers[keyword.lower()] = handler
        print(f"Debug: Registered keyword '{keyword}' to handler {handler.__name__}")
    
    def process_command(self, text):
        """Process a natural language command"""
        print(f"Debug: Processing command: '{text}'")
        
        # Check if any registered keywords match
        print(f"Debug: Registered command keywords: {list(self.command_handlers.keys())}")
        
        # Define priority groups - specific commands should be matched before generic ones
        generic_keywords = ['create', 'make']
        
        best_match = None
        best_match_priority = -1
        best_match_length = 0
        
        for keyword in self.command_handlers:
            if keyword.lower() in text.lower():
                # Determine priority: 0 for generic keywords, 1 for specific ones
                priority = 0 if keyword.lower() in generic_keywords else 1
                
                # Select based on priority first, then length
                if (best_match is None or 
                    priority > best_match_priority or 
                    (priority == best_match_priority and len(keyword) > best_match_length)):
                    best_match = keyword
                    best_match_priority = priority
                    best_match_length = len(keyword)
        
        if best_match:
            handler = self.command_handlers[best_match]
            print(f"Debug: Best matching keyword '{best_match}', calling handler {handler.__name__}")
            result = handler(text)
            print(f"Debug: Handler result: {result}")
            return result
        else:
            return {'success': False, 'message': 'Command not recognized'}
    
    def handle_create(self, text):
        """Handle create commands"""
        print(f"Debug: handle_create processing: '{text}'")
        
        # Extract shape type
        shape_type = 'box'  # Default
        if 'cylinder' in text.lower() or 'rod' in text.lower():
            shape_type = 'cylinder'
        elif 'sphere' in text.lower() or 'ball' in text.lower():
            shape_type = 'sphere'
        elif 'cone' in text.lower():
            shape_type = 'cone'
        
        # Extract dimensions
        dimensions = re.findall(r'\d+(?:\.\d+)?', text)
        dimensions = [float(d) for d in dimensions]
        
        # Create the shape
        doc = FreeCAD.ActiveDocument
        if not doc:
            doc = FreeCAD.newDocument()
        
        if shape_type == 'box':
            # Default dimensions
            l, w, h = 10.0, 10.0, 10.0
            
            # Override with provided dimensions
            if len(dimensions) >= 3:
                l, w, h = dimensions[0], dimensions[1], dimensions[2]
            elif len(dimensions) == 2:
                l, w = dimensions[0], dimensions[1]
                h = min(l, w) / 2
            elif len(dimensions) == 1:
                l = w = h = dimensions[0]
            
            # Create box
            box = doc.addObject("Part::Box", "Box")
            box.Length = l
            box.Width = w
            box.Height = h
            
            doc.recompute()
            
            return {
                'success': True,
                'message': f"Created box {l}×{w}×{h}mm"
            }
            
        elif shape_type == 'cylinder':
            # Default dimensions
            d, h = 10.0, 20.0
            
            # Override with provided dimensions
            if len(dimensions) >= 2:
                d, h = dimensions[0], dimensions[1]
            elif len(dimensions) == 1:
                d = dimensions[0]
                h = d * 2
            
            # Create cylinder
            cylinder = doc.addObject("Part::Cylinder", "Cylinder")
            cylinder.Radius = d / 2
            cylinder.Height = h
            
            doc.recompute()
            
            return {
                'success': True,
                'message': f"Created cylinder ø{d}×{h}mm"
            }
        
    def handle_hole(self, text):
        """Add a hole"""
        # Basic implementation
        return {'success': True, 'message': "Hole feature coming soon"}
    
    def handle_fillet(self, text):
        """Add fillets"""
        # Basic implementation
        return {'success': True, 'message': "Fillet feature coming soon"}
        
    def handle_draft(self, text):
        """Add draft angles"""
        selection = FreeCADGui.Selection.getSelection()
        if not selection:
            return {'success': False, 'message': 'Please select a part first'}
        
        # Extract angle if specified
        numbers = re.findall(r'\d+', text)
        angle = float(numbers[0]) if numbers else None
        
        return self.manufacturing.add_draft_angles(angle)  # Don't pass selection[0]

    def handle_ribs(self, text):
        """Add reinforcement ribs"""
        selection = FreeCADGui.Selection.getSelection()
        if not selection:
            return {'success': False, 'message': 'Please select a part first'}
        
        return self.manufacturing.add_ribs()  # Don't pass selection[0]
        
    def handle_shell(self, text):
        """Create a hollow shell"""
        selection = FreeCADGui.Selection.getSelection()
        if not selection:
            return {'success': False, 'message': 'Please select a part first'}
            
        # Extract thickness if specified
        thickness_match = re.search(r'(\d+\.?\d*)(?:\s*mm)?', text)
        thickness = float(thickness_match.group(1)) if thickness_match else 2.0
        
        return self.manufacturing.shell_part(thickness)  # Don't pass selection[0]
        
    def handle_extrude(self, text):
        """Handle extrusion commands"""
        print(f"Debug: handle_extrude called with text: {text}")
        
        # Extract distance
        distance = None
        distance_match = re.search(r'by\s+(\d+(?:\.\d+)?)\s*(?:mm|millimeters?)?', text, re.IGNORECASE)
        if distance_match:
            distance = float(distance_match.group(1))
            print(f"Debug: Extracted extrusion distance: {distance}")
        
        # Extract direction (if specified)
        direction = None
        if 'up' in text.lower() or 'upward' in text.lower():
            direction = 'up'
        elif 'down' in text.lower() or 'downward' in text.lower():
            direction = 'down'
        elif 'normal' in text.lower() or 'perpendicular' in text.lower():
            direction = 'auto'
            
        # Check if manufacturing_features is initialized
        if not hasattr(self, 'manufacturing') or self.manufacturing is None:
            print("Debug: manufacturing_features not initialized")
            return {'success': False, 'message': 'Manufacturing features module not initialized'}
        
        # Call the extrude_face method
        result = self.manufacturing.extrude_face(distance, direction)
        print(f"Debug: Extrusion result: {result}")
        return result
        
    def handle_gear(self, text):
        """Create a gear"""
        print("Debug: handle_gear called with text:", text)
        
        # Extract parameters
        numbers = re.findall(r'\d+', text)
        teeth = int(numbers[0]) if numbers else 20
        print("Debug: Extracted teeth count:", teeth)
        
        if 'module' in text:
            module_match = re.search(r'module\s*(\d+\.?\d*)', text)
            module = float(module_match.group(1)) if module_match else 2.0
        else:
            module = 2.0
        print("Debug: Using module:", module)
        
        # Extract width if specified
        width_match = re.search(r'width\s*(\d+\.?\d*)', text)
        width = float(width_match.group(1)) if width_match else 10.0
        print(f"Debug: Using width: {width}")
    
def handle_fillet(self, text):
    """Add fillets"""
    # Basic implementation
    return {'success': True, 'message': "Fillet feature coming soon"}
        
def handle_draft(self, text):
    """Add draft angles"""
    selection = FreeCADGui.Selection.getSelection()
    if not selection:
        return {'success': False, 'message': 'Please select a part first'}
        
    # Extract angle if specified
    numbers = re.findall(r'\d+', text)
    angle = float(numbers[0]) if numbers else None
        
        diameter = float(diameter_match.group(1)) if diameter_match else 10.0
        length = float(length_match.group(1)) if length_match else diameter * 5
        
        return self.standard_parts.create_shaft(diameter, length)
    
    def handle_moldable(self, text):
        """Make part moldable"""
        return self.optimization.make_moldable()
    
    def handle_printable(self, text):
        """Optimize for 3D printing"""
        return self.optimization.optimize_for_3d_printing()
    
    def handle_weight(self, text):
        """Reduce weight"""
        return self.optimization.reduce_weight()
